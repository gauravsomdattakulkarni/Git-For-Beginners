Git

-> it is distributed version control system
1: Local version Control
2: centralized version control system (cvcs)
	->get copy
	->change
	->upload copy
3: Distributed version control system
	->we can have local copy as well

1: git --version
2: git config
3: git config --global --list
4: git config --global user.name  "Gaurav Kulkarni"

5: Git Areas
	->working directory
	->staging area
	->commit history


6: create git local repository
	->git status : to check status
	->git init
	->git init -b main (when initialization  as main)

7: remove git rm .git

8:Add file to staging area
	-> git add filename
	
9: git log (get intitial commit)

10 : git commit -m "My First Commit"

11: git commit -a -m "My Third Commit" --> it can be used to skip stagging , directly commet

12: git diff : it can used to check difference between previous file and changed / modified file before staging in working directory

	git diff --staged if the file is added to staging area

13: git add .
	-> it is used to all files to staging area

14: Removing file from git
	-> git rm --cached filename.txt

15: read contents in file   
    -> cat filename

16 : create a new repository on the command line
echo "# Git-For-Beginners" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main (Creating Branch Main)
git remote add origin https://github.com/gauravsomdattakulkarni/Git-For-Beginners.git
git push -u origin main

17 : push an existing repository from the command line
git remote add origin https://github.com/gauravsomdattakulkarni/Git-For-Beginners.git
git branch -M main (Creating Branch Main)
git push -u origin main
git push origin main


18 :Using SSH Insted Of https   
    -> ssh-keygen -o

19: To Get Current Working directory
    pwd (present working directory)

20 : list files 
    ls 
    ls -a (it is used to get list of hidden files also)

21: git remote -v : the command can be used to get info about repo fetch /push 

22 : Tagging In Git 
     -> git tag it can used to show all given tags for this project 
    1: annoted Tagging
        -> git tag -a v1.0 -m "Git Commands"
        -> git show versionName ex : git show v1.0 , it will detaild infomation about perticular version
        ->pushing tag : git push origin tagName 
            ex: git push origin v1.1
    2: lightweight taggig 

23 : creating branch 
	-> git checkout -b feature  : it is used to create new branch with name feature1 and switch to it
	-> git switch 
	-> git checkout feature1
	-> git branch (to get list of branches)
	-> git switch --create featureBranchName

	ex : git switch main	 / git switch feature
24: Getting list of branches
	-> git branch 
	-> git branch --all 

25 : Switching Back to previous Branch 
	-> git switch -

26 : Deleting Branch 
	-> git branch --d featureBranchName

27 : git push origin feature 

28: git log --graph 
 for visulations

29 : Git Merge The Branch








